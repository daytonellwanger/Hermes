# Case Matters (at least by default)
#You can uncomment one more of the following parameters to change the behavior
#of the plugin.
#You will need to restart Eclipse to  make the plugin read any changes you#make

#If you want to see difficulty predictions made by the current algorithm, 
#uncomment the showStatusTransitions definition.
#You can help improve the algorithm by using the DifficultyStatus window to correct these predictions
#Predictions, your commands, and web acccesses to technical web pages are logged in the Logs folder
#of each project, and you can explore the files using a text editor to understand what is logged
#
#showStatusTransitions = true
#
#The frequency of predictions is determined by the following parameters
#Below are the defaults, do not edit the so you keep track of them
#
#segmentLength determines how many commands have to be executed in the
#steady state before a prediction is made about the difficulty level encountered  when
#entering this sequence of commands
#
#predictor.segmentLength = 25

#When you start Eclipse, the relationship between the nature of your commands
#the difficulty status. So startupLag determines how long (in terms of #commands) 
#it takes to make the first prediction
#
#predictor.startupLag = 50
#
#The plugin does not log or display a prediction when it is made.
#Instead it aggregates a certain number of made predictions, determined by statusAggregated,
#before committing to it in the log or displaying it.
#predictor.statusAggregated = 5
#
#Edit and uncomment the following to get statuses more frequently or differently to understand or 
#modify the algorithm parameters.
#Comment them back if you added these definitions for understanding
#
#predictor.segmentLength = 5
#predictor.startupLag = 3
#predictor.statusAggregated = 1
#
#The difficulty status algorithm classifies commands into categories.
#There are multiple possible classification algorithms.
#The ones we have explored so far are called  A0, A0Web and A1. 
#The main difference between A0 and A1 is that A1 classifies
#insert and delete commands into separate categories while A0 classifies them into a single
#edit category.
#In both cases, debug commands such as step into, step over are classified into a separate category.
#A0Web (A1Web) is different from A0 (A1) in that web accesses, 
#in addition to eclipse commands, are used for
#prediction.  
#
#The default is A0
#Uncomment one of the following definitions to change the classification scheme.
#If you do so, you must change the arff file used by the pterdictor
#
#predictor.commandClassification = A0
#predictor.commandClassification = A0Web
#predictor.commandClassification = A1
#predictor.commandClassification = A1Web
#
#
#This is the training data defined in terms of A0 features.
#Uncomment this specification for using this file
#
# predictor.arffLocation = modelData/A0UserStudy2010.arff
#
#This is the training data defined in terms of A0Web features.
#Uncomment this specification for using this file
#predictor.arffLocation = modelData/A0WebSwinguUerStudy.arff
#
##This is the training data defined in terms of A1Web features.
#Uncomment this specification for using this file
#
#predictor.arffLocation = modelData/A1WebSwingUserStudySeg20.arff
#
#Currently we do not have an arff file for pure A1 in the plugin.
#
#It is possible for the plugin to use data for A0, A1, A0web and A1web that is
#not bundled with it, and can look at external files in a directory specified by you
#If you have such a file, enter its full absolute name in the arffLocation
#definition shown below and then uncomment it. 
#Next uncomment the arffLocationIsAbsolute field after that
#
#predictor.arffLocation = G:/My Drive/DistSEEd/Nils Research/ARFF Data/static_old_20.arff
#
#Indicates that you are specifying an absolute file name rather than a file name relative to
#the plugin installation directory
#
#predictor.arffLocationIsAbsolute = true
#
#Training data can be processed by multiple classifiers. 
#The plugin uses by default J48.
#The other supported alternatives (through Weka) are ADABOOST and BAGGING.
#Search the web for information on these standard classifiers
#
#predictor.classifier = J48
#predictor.classifier = ADABOOST
#predictor.classifier = BAGGING
#
#Difficulties are rare, which confuses the classifiers above. 
#The training data can be augmented by filters to oversample the difficulty instances.
#The filters we support (through Weka again) are SMOTE and RESAMPLE.
#The default filter is SMOTE.
#
#predictor.oversample = SMOTE
#
#Uncomment the following definition if you wish to use RESAMPLE instead
#
#predictor.oversample = RESAMPLE
#
#if you wish to visualize the machine learning algorithm, uncomment the definition below.
#Comment it back when you want to use the plugin for normal work
#
#visualizePredictions = true
#
#The plugin tries to estimate how much long you have worked on a file or project.
#To do so, it considers no activity for a period > idleTime as idle time rather than think time
#This is the default
#
#idleTime = 1000
#
#Edit and uncomment the following to change idle time
#idleTime = 1000
#
#The following is for those debugging the plugin.
#Uncomment it for generating traces (only visible in the plugin mode)
#
#traceInfo = true
#
#Ignore the following
#
#showReplayer = true
#recorder.javalocation = D:/Program Files/Java/jdk1.7.0_51/bin/java
#player.javalocation = D:/Program Files/Java/jre7/bin/java
